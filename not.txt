server creation
----------------
  1- create package.json file----npm init
  2- install express framework  --- npm i express

server side technology=node---resolves multiple requests at a time

api
------
http request

header---secret data
body----data-json

types
---------
GET - read
POST - create
PUT - complete updation
PATCH - partial updation
DELETE - remove data

server response status code
-----------------------------
100 - info passing
200 - success
300 - redirection
400 - client side error
500 - server side error


server creation steps
---------------------------
 1. import express
 2. create app using express
 3. setting port numbr--3000
 4. resolves http request


Nodemon
------
if we run server using node recombilation not work
so we use another server 

-npm i -g nodemon

express.json()----to parse data to js from req body
json()----converts and send data as response
status()-------to send the satuscode
verify()--------used to verify json web token


Token in server
-------------------
JWT Token-json web Token
install--npm i jsonwebtoken
library - jsonwebtoken
sign() - method used to generate jwt Token

token verification
--------------------
token verification can be done using middlewares
they have the capacity to control server requests
middleware is a function with three arguments - request,response,next
two types of middlewares
  -1. Application specific middlewares
         --works before all the requests
  2. Router specific middlewares
         --can apply to specific requests in server


how to solve runtime error in js
----------------------------------
try except
---------
     try
       error causing code
     catch
       error solve


Mongo DB
-----------

shell commands
-----------------
CRUD
   -create
   -read
   -update
   -DELETE


 -show dbs             - to see databases
 -use(database name)   - to open a database
 -show collections     - to view collections inside db

 - db.(collection_name).find()
                       - to read all data in collection
 - db.(collection_name).findOne({unique_data}) 
                       - to read single data
 - db.(collection_name).insertOne({"acno":1001,"name":"amal",...........})
                       - create new data
 - db.(collection_name).find({balance:{gt:4000}}) 
                       - find using a condition
 - db.(collection_name).deleteOne({"uname":"anu"}) - delete count
                       - used to delete 
 - db.(collection_name).updateOne({"uname":"anu"},{$set:{uname:anu v}}) 
                       - update 


register - insertOne
login    - findOne
deposit/withdraw  - updateOne




Server database Intergration
-----------------------------
database-27017
server  -3000


mongoose -used to intergrate server with MongoDB--library

install - npm install mongoose
 
 steps
 -------

 1. import mongoose
 2. state a connection string to intergrate
 3. define a model for our collection
 